바이너리 파일이기 때문에 컴파일이랑 그런 거 필요없대. 
그래프 구조. 파일을 불러와도 동일하게 이 구조를 갖고 있다. 
JSON 파일 구조. (일반적인 text 기반으로 자료를 표시)



scenes
어떤 노드들이 있는가 
scene이 여러개 있을 수 있다. 각 scene은 노드들을 가지고 있다. 
이 node의 index는 nodes에 정의가 되어 있다.


nodes
각 노드는 children node를 가지고 있다.
mesh변환정보를 갖고 있다? matrix? 이는 child node에도 영향을 받게 된다.
그래서 이 노드가 translate가 됐으면 node 3, 4도 같이 영향을 받게 된다. 
변환정보는 matrix(4*4), or (translation, rotation, scale)
M = TRS 

mesh, accessor, bufferview, buffer순으로....
node는 mesh나 camera의 정보를 가질 수 있다.
동일하게 mesh의 index로 접근 가능. 


meshes (어떤 것들을 그릴지에 대한 정보) (primitive)
0번 mesh는 Triangle이고, primitives 하나이다. (삼각형)
attribute -> color_0, position 정보 (인덱스가 가리키는 것이 accessor이다.)
각 정점마다 color가 있는 attribute. 
mode : 4 -> glTriangles... glLines 인지에 대한 정보
data는 어디에 있느냐? 0번 하고 1번... 포지션 0번에 accessors 로 감
attribute정보랑 , material정보도 가지고 있다. 


accessors (bufferview는 accessor를 이용해 접근 가능)
어떤 버퍼 뷰를 이용해서 버퍼를 볼 지에 대한 정보를 가지고 있다. 
componentType : float이냐 short이냐 int이냐. 
5126은 float에 해당한다.
bufferView, byteOffset, componentType(float냐..), count(float로 된 n차원 벡터가(type) 몇 개가 있는지), type(몇개로 이루어진 변수냐), max, min (추가적인 정보. 직접 쓸 일은 별로 없다.)

bufferViews (buffer를 어떻게 볼지)
0번 버퍼에서 36개의 바이트를 읽어오면 된다.  target은 버퍼를 어떻게 해석할지.
float인지 int인지 모르니까 그 버퍼를 어떻게 잘라서 볼지에 대한 정보들이 적혀있다.
vertex buffer object . 
길이는 둘 다 36byte. offset이 있어서....  36번째부터 36개의 값을 본다. 
그래서 총 길이가 72이다. 
x,y,z 3쌍이 36 byte ,r,g,b 3 쌍이 36 byte
byteStride : 다음 데이터로 넘어갈 때 어떻게 읽을 거냐. 몇 개씩 끊어서 볼 거냐. 를 이야기함.

buffers (3차원 정점들의 position, color, normal, texture coordinate 같은 정보)
포지션 정보, color 정보는 byte string으로 저장되어 있다. 파일 안에 있을 수도 있고 파일 바깥에 있을 수도 있음. 
버퍼를 따로 외부 파일로 갖고 있을 수도 있고, byte string으로 저장하고 있을 수 있다. 
byteLength가 얼마나 되는지 추가적으로 담고 있다. 
uri .
이 데이터를 어떻게 볼지는 bufferViews가 정보를 갖고 있다.


buffer는 말 그대로 데이터를 가져오는 것. byteLength : 35이면 35개의 byte를 가지고 있는 것임. 순서는 어떤 건지 알 수 없음. 그건 bufferView의 정보를 이용한다.



tiny_gltf.h 
json.hpp json parsing을 위해 필요한 거 
stb image, 일반적인 png나 jpg를 다 읽을 수 있나? ㅇㅇ..그렇대..이미지 파일이 있을 수도 있고,
gltf 파일에 임베딩 되어 있을 수 있다.이미지 자체를 byte stream으로 박아놓는 형태도 있다?



1. mesh를 모두 그리는 실습  
2. camera 를 세팅하는 방법
3. mesh->metarial->texture에 접근하는 방법 


////////////////////////////////////////////////////////////
Camera.gltf

nodes 
mesh, rotation를 가지고 있는 노드 1개, camera를 가지고 있는 노드 2개. (각각 translation은 동일. 위치가 동일하다는 얘기임.)

cameras
0번째 카메라. perspective. aspectRatio, yfov, zfar, znear
1번째 카메라. orthographic. xmag(right 값), ymag(upper, top), zfar, znear

meshes
primitive1개. attribute는 position뿐. 
indices : 지난 시간에 array로 삼각형을 그렸다면 여기서는 index를 이용해 사각형을 그린다. (glDrawElement로)


accessors
componentType : 5123 (UNSIGNED SHORT)
count : 6
type : "SCARLAR"
포지션값들이 사각형이어서 4개가 들어올 것이다. 보통 삼각형으로 2번이어서 DrawArray로 그린다면 6개씩 들어올 텐데 DrawElement로 그릴 것이기 때문에 4개가 들어온다. 

position을 가리키는 1번 accessor로 가면...
componentType : float
count : 4
type : "VEC3"

보면 color정보가 없다. shader를 보자! 

////////////////////////////////////////////////////////////////////

material (texture 정보를 갖고 있다.)
phong reflection에 대한 material이라고 배웠다.
glTF에서는 기본적인 shading model이 physically based rendering(PBR)이다.
특별히 metallic-roughness-model을 사용한다. (얼마나 금속같냐, 화면이 얼마나 부드럽냐)
 "pbrMetallicRoughness": {
                "baseColorTexture": {
                    "index": 0


pbr을 짜면 좋겠지만 그건 너무 어려우니까 그냥 기존의 구현에서 texture를 이용해서 diffuse 컬러를 이용한다?? 그래서 baseColorTexture를 이용해서 texture값을 diffuse컬러로 하고 sepcular만 해서 (ambient는 없음) phong shading모델을 그리시면 된다. 
다른 metallicfactor 나 그런 건 무시하면 된대.

mesh는 primitive에서 attribute정보 뿐만 아니라 material 정보를 가지고 있다. 
material에 가면 texture정보가 있는 경우도 있고, 없는 경우도 있다. 그 부분은 고려해서 짜야 한다!! 없으면 color정보만 있는 것도 있다.
Texture가 있는 경우 기존의 textures들 중에서 특정 texture를 가리키게 된다.


textures
source (이미지)에 대한 index 정보
sampler에 대한 index 정보. 


glTF에 보면 images라는 리스트가 있고 samplers 라는 리스트가 있다. 
image는 uri정보. 외부의 파일이다.  또는 bufferView .. 버퍼에 바이트 스트링으로 저장되어 있을 수도 있다. 파일 포맷은 알아서 파싱해주니 걱정 ㄴㄴ. 

samplers
texture maping 하는 부분이 커졌을때, 작아졌을 때 (mag_filter , min_filter)
아니면 texture coordinate가 0에서 1 사이를 넘어갔을 때 어떻게 할 건지.


////////////////////////////////////////////////////////////////////
texture 컬러를 diffuse 컬러로 보고 phong shading을 적용하는 방법.






